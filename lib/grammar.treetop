grammar PQL
  
  # expressions

  rule matching_expression
    'MATCH' space selective_expression <MatchingExpression>
  end

  rule selective_expression
    subset_operator 'WHERE' condition <SelectiveExpression> /
    'WHERE' condition <SelectiveExpression>
  end

  rule value_expression
    space? '(' reductive_operator name selective_expression ')' space? <ValueExpression> /
    space? '(' name selective_expression ')' space? <ValueExpression>
  end

  rule condition
    space? '(' condition ')' space? /
    comparison (logical_operator (comparison / condition))* <Condition>
  end

  rule comparison
    left:name comparative_operator right:(literal / value_expression / name) <Comparison>
  end


  # subset operators

  rule subset_operator
    space? child:(first_by / last_by) space? <SubsetOperator>
  end

  rule first_by
    'FIRST' space (integer_literal space)? 'BY' name <FirstByOperator>
  end

  rule last_by
    'LAST' space 'BY' space name <LastByOperator> /
    'LAST' space integer_literal space 'BY' name <LastByOperator>
  end


  # reductive operators

  rule reductive_operator
    space? child:(max / min / count / sum) space? <ReductiveOperator>
  end

  rule max
    'MAX' <MaxOperator>
  end

  rule min
    'MIN' <MinOperator>
  end

  rule count
    'COUNT' <CountOperator>
  end

  rule sum
    'SUM' <SumOperator>
  end


  # logical operators

  rule logical_operator
    space? child:(and / or) space? <LogicalOperator>
  end

  rule and
    'AND' <AndOperator>
  end

  rule or
    'OR' <OrOperator>
  end


  # comparative operators

  rule comparative_operator
    space?
    child:(does_not_equal / is_greater_than_or_equal_to / is_less_than_or_equal_to
      / matches / is_in / is_not_in / is_greater_than / is_less_than / equals)
    space?
    <ComparativeOperator>
  end

  rule does_not_equal
    '!=' <DoesNotEqualOperator> /
    'IS NOT' <DoesNotEqualOperator>
  end

  rule is_greater_than_or_equal_to
    '>=' <IsGreaterThanOrEqualToOperator>
  end

  rule is_less_than_or_equal_to
    '<=' <IsLessThanOrEqualToOperator>
  end

  rule matches
    '=~' <MatchesOperator>
  end

  rule is_in
    'IN' <IsInOperator>
  end

  rule is_not_in
    'NOT' space 'IN' <IsNotInOperator>
  end

  rule is_greater_than
    '>' <IsGreaterThanOperator>
  end

  rule is_less_than
    '<' <IsLessThanOperator>
  end

  rule equals
    '=' <EqualsOperator> /
    'IS' <EqualsOperator>
  end


  # literals

  rule literal
    space?
    child:(list_literal / string_literal / regular_expression_literal
      / float_literal / integer_literal / null_literal)
    space? 
    <Literal>
  end

  rule list_literal
    '[' space? literal space? (',' space? literal)* space? ']' <ListLiteral> /
    '[' space? ']' <ListLiteral>
  end

  rule string_literal
    '"' ('\"' / !'"' .)* '"' <StringLiteral> /
    "'" ("\'" / !"'" .)* "'" <StringLiteral> 
  end

  rule regular_expression_literal
    '/' ('\/' / !'/' .)* '/' <RegularExpressionLiteral>
  end

  rule float_literal
    ('+' / '-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
  end

  rule integer_literal
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule null_literal
    'NULL' <NullLiteral>
  end


  # name and whitespace helpers

  rule name
    space? ([a-zA-Z_]+) space? <Name>
  end

  rule space
    [\s]+
  end

end