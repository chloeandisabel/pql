grammar PQL

  # block

  rule block
    s? (matching_expression s? ';' s?)* (matching_expression s?)? <Block>
  end


  # expressions

  rule matching_expression
    'MATCH' s cardinality_operator s selective_expression <MatchingExpression> /
    'MATCH' s cardinality_operator s 'AS' s name s selective_expression <MatchingExpression>
  end

  rule value_expression
    '(' s? name s selective_expression s? ')' <ValueExpression> /
    '(' s? reductive_operator s name s selective_expression s? ')' <ValueExpression> /
    '(' s? name s 'OF' s subset_operator s selective_expression s? ')' <ValueExpression> /
    '(' s? reductive_operator s name s 'OF' s subset_operator s selective_expression s? ')' <ValueExpression>
  end

  rule selective_expression
    'WHERE' s condition <SelectiveExpression>
  end


  # conditions

  rule condition
    '(' s? condition s? ')' /
    atomic_condition (s logical_operator s (atomic_condition / condition))* <Condition>
  end

  rule atomic_condition
    child:(typical_condition / comparative_condition) <AtomicCondition>
  end

  rule typical_condition
    'TYPE' s string_literal <TypicalCondition>
  end

  rule comparative_condition
    left:(literal / value_expression / reference) s comparative_operator s right:(literal / value_expression / reference) <ComparativeCondition>
  end


  # cardinality operators

  rule cardinality_operator
    simple_cardinality_operator <CardinalityOperator> /
    complex_cardinalty_operator+ <CardinalityOperator>
  end

  rule simple_cardinality_operator
    child:(none / each / all / any) <SimpleCardinalityOperator>
  end

  rule complex_cardinality_operator
    child:(first_by / last_by / grouped_by) <ComplexCardinalityOperator>
  end

  rule subset_operator
    child:(first_by / last_by) <SubsetOperator>
  end

  rule none
    'NONE' <NoneOperator>
  end

  rule each
    'EACH' <EachOperator>
  end

  rule all
    'ALL' <AllOperator>
  end

  rule any
    'ANY' <AnyOperator>
  end

  rule grouped_by
    'GROUPED' s 'BY' s name <GroupedByOperator>
  end

  rule first_by
    'FIRST' s 'BY' s name <FirstByOperator> /
    'FIRST' s integer_literal s 'BY' s name <FirstByOperator>
  end

  rule last_by
    'LAST' s 'BY' s name <LastByOperator> /
    'LAST' s integer_literal s 'BY' s name <LastByOperator>
  end


  # reductive operators

  rule reductive_operator
    child:(max / min / count / sum / union) <ReductiveOperator>
  end

  rule max
    'MAX' <MaxOperator>
  end

  rule min
    'MIN' <MinOperator>
  end

  rule count
    'COUNT' <CountOperator>
  end

  rule sum
    'SUM' <SumOperator>
  end

  rule union
    'UNION' <UnionOperator>
  end


  # logical operators

  rule logical_operator
    child:(and / or) <LogicalOperator>
  end

  rule and
    'AND' <AndOperator>
  end

  rule or
    'OR' <OrOperator>
  end


  # comparative operators

  rule comparative_operator
    child:(does_not_equal / is_greater_than_or_equal_to
      / is_less_than_or_equal_to / matches / includes / does_not_include
      / is_in / is_not_in / intersects / disjoint / is_greater_than
      / is_less_than / equals) <ComparativeOperator>
  end

  rule does_not_equal
    '!=' <DoesNotEqualOperator> /
    'IS NOT' <DoesNotEqualOperator>
  end

  rule is_greater_than_or_equal_to
    '>=' <IsGreaterThanOrEqualToOperator>
  end

  rule is_less_than_or_equal_to
    '<=' <IsLessThanOrEqualToOperator>
  end

  rule matches
    '=~' <MatchesOperator>
  end

  rule includes
    'INCLUDES' <IncludesOperator>
  end

  rule does_not_include
    'DOES' s 'NOT' s 'INCLUDE' <DoesNotIncludeOperator>
  end

  rule is_in
    'IN' <IsInOperator>
  end

  rule is_not_in
    'NOT' s 'IN' <IsNotInOperator>
  end

  rule intersects
    'INTERSECTS' <IntersectsOperator>
  end

  rule disjoint
    'DISJOINT' <DisjointOperator>
  end

  rule is_greater_than
    '>' <IsGreaterThanOperator>
  end

  rule is_less_than
    '<' <IsLessThanOperator>
  end

  rule equals
    '=' <EqualsOperator> /
    'IS' <EqualsOperator>
  end


  # literals

  rule literal
    child:(list_literal / string_literal / regular_expression_literal
      / float_literal / integer_literal / null_literal) <Literal>
  end

  rule list_literal
    '[' s? literal s? (',' s? literal)* s? ']' <ListLiteral> /
    '[' s? ']' <ListLiteral>
  end

  rule string_literal
    '"' ('\"' / !'"' .)* '"' <StringLiteral> /
    "'" ("\'" / !"'" .)* "'" <StringLiteral>
  end

  rule regular_expression_literal
    '/' ('\/' / !'/' .)* '/' <RegularExpressionLiteral>
  end

  rule float_literal
    ('+' / '-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
  end

  rule integer_literal
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule now_literal
    'NOW' <NowLiteral>
  end

  rule time_delta_literal
    value:'1' s unit:('DAY' / 'HOUR' / 'MINUTE' / 'SECOND') s 'AGO' <TimeDeltaLiteral> /
    value:([02-9][0-9]*) s unit:('DAYS' / 'HOURS' / 'MINUTES' / 'SECONDS') s 'AGO' <TimeDeltaLiteral>
  end

  rule null_literal
    'NULL' <NullLiteral>
  end

  # name and whitespace helpers

  rule reference
    escapes:('^'*) name <Reference>
  end

  rule name
    [a-zA-Z_]+ <Name>
  end

  rule s
    [\s]+
  end

end
